name: Rhino Test
on:
  # Run on pushes to 'main' branch
  push:
    branches:
      - main
  # Run on any opened pull request
  pull_request:
  # Run manually via GitHub Actions website
  workflow_dispatch:
permissions:
  contents: read
jobs:
  main:
    name: Run linters and tests
    runs-on: ubuntu-24.04-arm
    container:
      image: docker.io/jsleight1/example_rhino_shiny:latest
      options: --user root
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2.11.0
        with:
          r-version: '4.4.2'
          install-r: false

      - name: Add libPaths
        run: |
          echo -e '.libPaths(c("/usr/local/lib/R/site-library", "/usr/local/lib/R/library"))' > .Rprofile
        shell: bash

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.0

      - name: Lint R
        if: always()
        shell: Rscript {0}
        run: |
          library(lintr)
          sessionInfo()
          getwd()
          list.files(all.files = TRUE)
          paths <- c("app", "tests/testthat")
          rhino:::check_paths(paths)
          rhino::lint_r()
          


          # path <- "app"
          # lintr:::read_settings(path)

          # pattern <- "(?i)[.](r|rmd|qmd|rnw|rhtml|rrst|rtex|rtxt)$"
          # exclusions <- list("renv", "packrat")
          # exclusions <- lintr:::normalize_exclusions(exclusions, root = "app", pattern = pattern)

          # files <- lintr:::normalize_path(dir(path, pattern = pattern, recursive = TRUE, full.names = TRUE))
          # files <- lintr:::drop_excluded(files, exclusions)


          # system("cat /__w/example_rhino_shiny/example_rhino_shiny/app/main.R")

          # for (file in files) {
          #   print(file)
          #   lintr::lint(file, parse_settings = FALSE, exclusions = exclusions)
          # }

          # file <- "/__w/example_rhino_shiny/example_rhino_shiny/app/main.R"
          # out <- tryCatch(
          #   lintr::lint(file, parse_settings = FALSE, exclusions = exclusions),
          #   error = function(cond) {
          #       print("ERRRRRRRRRRRRRRR")
          #   }
          # )


          
          #lintr::lint_dir("tests/testthat")
          #print(traceback())
          
          #lints <- do.call(c, lapply(paths, rhino:::lint_path))
          #print(length(lints))

          #rhino::lint_r()

      # - name: Lint JavaScript
      #   if: always()
      #   shell: Rscript {0}
      #   run: rhino::lint_js()

      # - name: Lint Sass
      #   if: always()
      #   shell: Rscript {0}
      #   run: rhino::lint_sass()

      # - name: Build JavaScript
      #   if: always()
      #   shell: Rscript {0}
      #   run: rhino::build_js()

      # - name: Build Sass
      #   if: always()
      #   shell: Rscript {0}
      #   run: rhino::build_sass()

      # - name: Run R unit tests
      #   if: always()
      #   shell: Rscript {0}
      #   run: rhino::test_r()

      # - name: Run Cypress end-to-end tests
      #   if: always()
      #   uses: cypress-io/github-action@v6
      #   with:
      #     working-directory: .rhino # Created by earlier commands which use Node.js
      #     start: npm run run-app
      #     project: ../tests
      #     wait-on: 'http://localhost:3333/'
      #     wait-on-timeout: 60
